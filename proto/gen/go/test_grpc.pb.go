// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: test.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TesteApi_Echo_FullMethodName    = "/main.TesteApi/Echo"
	TesteApi_GetUser_FullMethodName = "/main.TesteApi/GetUser"
)

// TesteApiClient is the client API for TesteApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TesteApiClient interface {
	Echo(ctx context.Context, in *ResponseRequest, opts ...grpc.CallOption) (*ResponseRequest, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type testeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTesteApiClient(cc grpc.ClientConnInterface) TesteApiClient {
	return &testeApiClient{cc}
}

func (c *testeApiClient) Echo(ctx context.Context, in *ResponseRequest, opts ...grpc.CallOption) (*ResponseRequest, error) {
	out := new(ResponseRequest)
	err := c.cc.Invoke(ctx, TesteApi_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testeApiClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, TesteApi_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TesteApiServer is the server API for TesteApi service.
// All implementations must embed UnimplementedTesteApiServer
// for forward compatibility
type TesteApiServer interface {
	Echo(context.Context, *ResponseRequest) (*ResponseRequest, error)
	GetUser(context.Context, *UserRequest) (*UserResponse, error)
	mustEmbedUnimplementedTesteApiServer()
}

// UnimplementedTesteApiServer must be embedded to have forward compatible implementations.
type UnimplementedTesteApiServer struct {
}

func (UnimplementedTesteApiServer) Echo(context.Context, *ResponseRequest) (*ResponseRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedTesteApiServer) GetUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedTesteApiServer) mustEmbedUnimplementedTesteApiServer() {}

// UnsafeTesteApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TesteApiServer will
// result in compilation errors.
type UnsafeTesteApiServer interface {
	mustEmbedUnimplementedTesteApiServer()
}

func RegisterTesteApiServer(s grpc.ServiceRegistrar, srv TesteApiServer) {
	s.RegisterService(&TesteApi_ServiceDesc, srv)
}

func _TesteApi_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesteApiServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TesteApi_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesteApiServer).Echo(ctx, req.(*ResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TesteApi_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesteApiServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TesteApi_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesteApiServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TesteApi_ServiceDesc is the grpc.ServiceDesc for TesteApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TesteApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.TesteApi",
	HandlerType: (*TesteApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TesteApi_Echo_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _TesteApi_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
